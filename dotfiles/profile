# Set the command line to include host and current directory.
#export PS1="[\h \w] "
# Set the command line to include time, user@host, current directory.
# This will be changed later.
export PS1="[\t] \u@\h:\w > "

# Set the colors of a directory listing.
# These colors look good on the Grass terminal theme.
#   Directory            = g:cyan
#   Symbolic link        = C:bold green
#   Socket               = F:bold magenta
#   Pipe                 = f:magenta
#   Executable           = h:light grey
#   Block special        = e:blue g:cyan background
#   Character special    = e:blue d:brown background
#   Executable/setuid    = H:bold light grey
#   Executable/setgid    = H:bold light grey
#   directory w/sticky   = G:bold cyan
#   directory w/o sticky = G:bold cyan
export LSCOLORS=gxCxFxfxhxegedHxHxGxGx

# Add to the path
export PATH=$PATH:$HOME/bin/MacConfig/scripts:/android-sdk/tools:/android-sdk/platform-tools

# Set the default editor to TextMate.
export EDITOR=/usr/local/bin/mate

# Set the default man pager to less with the following options:
# -F = Display and then exit if only a single page.
# -i = Ignore case on searches unless an uppercase letter is specified.
# -s = Squeeze multiple blank lines into a single blank line.
export PAGER='less -Fis'

# History configuration
export HISTSIZE=100000
export HISTFILESIZE=100000
export HISTCONTROL=ignoredups      # Ignore duplicates in history
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S  "
# Set history list to append to the history file when the shell exists, rather than overwrite.
shopt -s histappend
# Append every line to history.
export PROMPT_COMMAND='history -a'

# Only complete with directories when executing a directory-related command.
complete -d cd mkdir rmdir

##############################################################################
# Aliases
##############################################################################

# Change directory aliases.
alias ~='cd ~'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias home='cd ~'

# Directory listing aliases.
alias d='ls -FGhl'
alias dir='ls -FGhl'
alias da='ls -aFGhl'
alias la='ls -aGhl'

# Display disk usage in a human-readable format.
alias du='du -h'

# Show files being deleted.
alias del='rm -v'
alias rm='rm -v'

# Rename like in Windows.
alias ren=mv

# Eject optical disk from the command line.
alias eject='drutil tray open'

# Ping only 4 times like in Windows.
alias ping='ping -c4'

# Reveal files in finder instead of opening them.
alias reveal='open -R --'

# Launch applications.
alias textedit='open -e'
alias eclipse='open /Applications/eclipse/Eclipse.app'

# Default editor.
alias edit='open -a /Applications/TextMate.app'

# Set up git command line completion.
#done below - source ~/bin/git-completion.sh
source ~/bin/git-flow-completion.sh

# If TextMate is available and we're in Terminal.app...
if [ "$TERM_PROGRAM" == "Apple_Terminal" -a -x "`which mate`" ]
then
	export LESSEDIT='mate -l %lm %f' # press V in less to edit the file in TextMate
fi

##############################################################################

# Open man pages in Preview.app.
function pman() 
{ 
	man -t "$@" | open -f -a /Applications/Preview.app; 
}

# 'cd' into SMB URLs like this:  cd_smburl smb://host/share
# Requires <http://github.com/jasoncodes/scripts/blob/master/smburl_to_path>
function cd_smburl()
{
	cd "`smburl_to_path "$1"`"
}

##############################################################################
# Ruby
##############################################################################

# Enable rvm if available.
if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
	source "$HOME/.rvm/scripts/rvm"
fi
[[ -n "$rvm_path" ]] && [[ -r "$rvm_path/scripts/completion" ]] && source "$rvm_path/scripts/completion"
export rvm_pretty_print_flag=1

# mategem makes it easy to open a gem in TextMate
# original src: <http://effectif.com/articles/opening-ruby-gems-in-textmate>
function mategem()
{
	local GEM="$1"
	if [ -z "$GEM" ]
	then
		echo "Usage: mategem <gem>" 1>&2
		false
	else
		gem_bin_path > /dev/null # init path
		mate "$(gem_bin_path)/gems/$GEM"
	fi
}
_mategem()
{
	local curw
	COMPREPLY=()
	curw=${COMP_WORDS[COMP_CWORD]}
	gem_bin_path > /dev/null # init path
	local gems="$(gem_bin_path)/gems"
	COMPREPLY=($(compgen -W '$(ls $gems)' -- $curw));
	return 0
}
complete -F _mategem -o dirnames mategem

##############################################################################

# git-update
# Update the current branch from the upstream branch.
# If there are uncommited changes, rebase them on top of the upstream changes.
function gup
{
	# subshell for `set -e` and `trap`
	(
		set -e # fail immediately if there's a problem

		# use `git-up` if installed
		if type git-up > /dev/null 2>&1
		then
			exec git-up
		fi

		# fetch upstream changes
		git fetch

		BRANCH=$(git describe --contains --all HEAD)
		if [ -z "$(git config branch.$BRANCH.remote)" -o -z "$(git config branch.$BRANCH.merge)" ]
		then
			echo "\"$BRANCH\" is not a tracking branch." >&2
			exit 1
		fi

		# create a temp file for capturing command output
		TEMPFILE="`mktemp -t gup.XXXXXX`"
		trap '{ rm -f "$TEMPFILE"; }' EXIT

		# if we're behind upstream, we need to update
		if git status | grep "# Your branch" > "$TEMPFILE"
		then

			# extract tracking branch from message
			UPSTREAM=$(cat "$TEMPFILE" | cut -d "'" -f 2)
			if [ -z "$UPSTREAM" ]
			then
				echo Could not detect upstream branch >&2
				exit 1
			fi

			# can we fast-forward?
			CAN_FF=1
			grep -q "can be fast-forwarded" "$TEMPFILE" || CAN_FF=0

			# stash any uncommitted changes
			git stash | tee "$TEMPFILE"
			[ "${PIPESTATUS[0]}" -eq 0 ] || exit 1

			# take note if anything was stashed
			HAVE_STASH=0
			grep -q "No local changes" "$TEMPFILE" || HAVE_STASH=1

			if [ "$CAN_FF" -ne 0 ]
			then
				# if nothing has changed locally, just fast foward.
				git merge --ff "$UPSTREAM"
			else
				# rebase our changes on top of upstream, but keep any merges
				git rebase -p "$UPSTREAM"
			fi

			# restore any stashed changed
			[ "$HAVE_STASH" -ne 0 ] && git stash pop -q

		fi

	)
}

# Compare two files using the selected diff application.
dif()
{
    if [ ${1:0:1} == "/" ];
    then
        DIFFPATH1=$1
    else
        DIFFPATH1=$(pwd)/$1
    fi

    if [ ${2:0:1} == "/" ];
    then
        DIFFPATH2=$2
    else
        DIFFPATH2=$(pwd)/$2
    fi

    if [ -z ${3} ];
    then
        DIFFPATH3=
    elif [ ${3:0:1} == "/" ];
    then
        DIFFPATH3=$3
    else
        DIFFPATH3=$(pwd)/$3
    fi

    /Applications/Software\ Development/p4merge.app/Contents/Resources/launchp4merge ${DIFFPATH1} ${DIFFPATH2} ${DIFFPATH3}

    unset DIFFPATH1
    unset DIFFPATH2
    unset DIFFPATH3
}

##############################################################################
# Define the prompt.
##############################################################################

# Define colors to use in prompt.
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

# Begin awesome color prompt:
# - txtrst = Reset colors in case they were messed up by a command.
# - \t     = Display current time.
export PS1="\[$txtrst\][\t] "

# Add rvm version@gemset
if [[ -n "$rvm_path" ]]
then
	function __my_rvm_ps1()
	{
		#[[ -z "$rvm_ruby_string" ]] && return
		if [[ -z "$rvm_gemset_name" && "$rvm_sticky_flag" -ne 1 ]]
		then
			[[ "$rvm_ruby_string" = "system" && ! -s "$rvm_path/config/alias" ]] && return
			grep -q -F "default=$rvm_ruby_string" "$rvm_path/config/alias" && return
		fi
		local full=$(
			"$rvm_path/bin/rvm-prompt" i v p g s |
			sed \
				-e 's/jruby-jruby-/jruby-/' -e 's/ruby-//' \
				-e 's/-head/H/' \
				-e 's/-2[0-9][0-9][0-9]\.[0-9][0-9]//' \
				-e 's/-@/@/' -e 's/-$//')
		[ -n "$full" ] && echo "$full "
	}
#	export PS1="$PS1\[$txtred\]"'$(__my_rvm_ps1)'
fi

# Add user@host:path and current directory.
export PS1="$PS1\[$txtgrn\]\u@\h\[$txtrst\]:\[$txtcyn\]\w"

function realpath()
{
	python -c 'import os,sys;print os.path.realpath(sys.argv[1])' "$@"
}

function first_file_match()
{
	local OP="$1"
	shift
	while [ $# -gt 0 ]
	do
		if [ $OP "$1" ]
		then
			echo "$1"
			return 0
		fi
		shift
	done
	return 1
}

# Add git status if available.
if which git > /dev/null
then
	GIT_COMPLETION_PATH="$(dirname $(realpath "$(which git)"))/../etc/bash_completion.d/git-completion.bash"
fi
if [ ! -f "$GIT_COMPLETION_PATH" ]
then
	GIT_COMPLETION_PATH=$(first_file_match -f \
		"/usr/local/git/contrib/completion/git-completion.bash" \
		"/opt/local/share/doc/git-core/contrib/completion/git-completion.bash" \
		"/etc/bash_completion.d/git" \
	)
fi
if [ -f "$GIT_COMPLETION_PATH" ]
then
	source "$GIT_COMPLETION_PATH"
	export GIT_PS1_SHOWDIRTYSTATE=1
	export GIT_PS1_SHOWSTASHSTATE=1
	export GIT_PS1_SHOWUNTRACKEDFILES=1
	export PS1="$PS1\[$txtylw\]"'$(__git_ps1 " (%s)")'
fi

# Finish off the prompt.
export PS1="$PS1\[$txtrst\]"' > '
